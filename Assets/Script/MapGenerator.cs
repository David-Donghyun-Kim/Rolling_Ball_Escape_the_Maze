using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.SceneManagement;

public class MapGenerator : MonoBehaviour
{
    public GameObject wall;
    public GameObject mapCenter;
    public int[,] mazeMap;

    // Start is called before the first frame update
    void Awake()
    {
        #region Stage 1 - 1
        if (SceneManager.GetActiveScene().name == "Chapter 1 - 1")
        {
            int[,] maze = new int[,]
        {
            {1,1,1,1,1,0,0,0,1,1,0,0,1,1 },
            {0,0,1,0,1,0,1,1,0,0,1,0,0,1 },
            {1,0,1,0,0,0,0,1,0,1,1,1,0,0 },
            {1,0,0,0,1,0,1,0,0,0,1,0,0,1 },
            {1,1,0,1,1,0,1,0,1,0,0,0,1,1 },
            {1,0,0,0,0,1,0,0,1,1,1,1,0,1 },
            {0,0,1,0,1,1,1,0,0,1,0,0,0,0 },
            {1,0,0,1,1,0,0,0,1,1,0,1,0,1 },
            {1,0,1,0,0,0,1,0,0,0,0,1,0,1 },
            {1,0,1,0,1,1,1,1,0,1,0,1,0,0 },
            {0,0,0,0,1,0,1,0,0,1,0,1,1,0 },
            {0,1,0,1,1,0,0,0,1,1,0,1,0,1 },
            {0,1,1,0,0,0,1,0,0,1,0,0,0,0 },
            {1,0,0,0,1,1,1,0,1,1,0,1,1,1 }
        };

            mazeMap = maze;

            for (int i = 0; i < 14; i++)
            {
                for (int j = 0; j < 14; j++)
                {
                    if (maze[i, j] == 1)
                    {
                        GameObject stage_1_wall = Instantiate(wall);
                        stage_1_wall.transform.parent = mapCenter.transform;
                        stage_1_wall.transform.position = new Vector3(-26 + j * 4, 2.5f, 26 - i * 4);
                    }
                    else
                        continue;
                }
            }
        }
        #endregion

        #region Stage 1 - 2
        if (SceneManager.GetActiveScene().name == "Chapter 1 - 2")
        {
            int[,] maze = new int[,]
        {
            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 },
            {0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1 },
            {1,0,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1 },
            {1,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1 },
            {1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,0,1,1,1,0,1 },
            {1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,1,0,1 },
            {1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,0,1 },
            {1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1 },
            {1,1,1,1,1,0,1,0,1,1,1,1,1,0,1,0,1,0,1,0,1 },
            {1,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,1,0,1,0,1 },
            {1,0,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,0,1,1,1 },
            {1,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,1 },
            {1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,0,1,0,1,0,1 },
            {1,0,1,0,1,0,0,0,0,0,1,0,1,0,0,0,1,0,1,0,1 },
            {1,1,1,0,1,1,1,1,1,0,1,0,1,0,1,1,1,1,1,0,1 },
            {1,0,0,0,1,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,1 },
            {1,0,1,1,1,0,1,0,1,1,1,1,1,0,1,0,1,1,1,0,1 },
            {1,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,1 },
            {1,0,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1 },
            {1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0 },
            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 }
        };

            mazeMap = maze;

            for (int i = 0; i < 21; i++)
            {
                for (int j = 0; j < 21; j++)
                {
                    if (maze[i, j] == 1)
                    {
                        GameObject stage_1_wall = Instantiate(wall);
                        stage_1_wall.transform.parent = mapCenter.transform;
                        stage_1_wall.transform.position = new Vector3(-26 + j * 4, 2.5f, 26 - i * 4);
                    }
                    else
                        continue;
                }
            }
        }
        #endregion

        #region Stage 1 - 3
        if (SceneManager.GetActiveScene().name == "Chapter 1 - 3")
        {
            int[,] maze = new int[,]
        {
            { 1,0,0,0,0,0,0,0,1,0,1,0,0,0,1,1,0,0,0,1,0,0,0,1,0 }, // 24
            { 0,0,1,1,0,1,1,0,1,0,0,0,1,0,0,0,0,1,0,0,1,1,0,1,0 }, // 23
            { 1,1,1,1,0,1,1,0,0,1,1,1,1,0,1,0,1,0,1,0,1,1,0,0,0 }, // 22
            { 0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,1,0 }, // 21
            { 0,1,0,0,1,1,0,1,0,1,0,1,0,1,0,1,1,0,0,1,1,0,0,0,0 }, // 20
            { 0,0,0,1,0,0,1,0,1,0,1,0,0,0,0,1,0,1,0,1,0,0,1,1,1 }, // 19
            { 0,1,0,1,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,1,0,0,0,0 }, // 18
            { 0,1,0,0,1,0,1,1,0,1,0,1,0,1,0,0,0,1,1,1,1,1,1,0,1 }, // 17
            { 0,1,0,1,0,0,0,1,0,0,1,0,0,0,0,1,1,1,0,0,1,0,0,0,1 }, // 16
            { 1,0,0,1,0,1,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,0,1,0,0 }, // 15
            { 0,0,1,0,0,0,1,0,1,0,1,0,1,0,0,0,0,1,0,0,0,1,0,1,0 }, // 14
            { 1,1,0,0,1,1,0,0,0,0,0,1,0,0,1,1,0,1,0,1,0,0,0,1,0 }, // 13
            { 0,0,0,1,1,1,0,1,0,1,0,0,1,0,1,0,1,0,0,0,1,1,0,1,0 }, // 12
            { 0,1,0,0,1,0,0,1,0,1,1,0,0,1,0,0,1,0,1,0,0,0,1,0,0 }, // 11
            { 0,0,1,0,0,1,1,1,0,0,0,1,0,0,0,1,0,0,1,0,1,1,0,0,1 }, // 10
            { 0,1,0,1,0,0,0,0,0,1,0,0,1,1,1,0,0,1,0,0,0,0,1,1,0 }, // 9
            { 1,0,0,0,1,1,0,1,1,1,1,0,0,0,0,0,1,0,0,1,1,0,1,0,0 }, // 8
            { 1,0,1,1,1,0,0,0,0,1,1,1,1,1,0,1,0,0,1,0,1,0,1,1,0 }, // 7
            { 0,0,0,0,0,1,0,1,0,0,1,0,0,1,1,0,0,1,0,0,1,0,0,0,0 }, // 6
            { 0,1,1,1,1,0,0,1,0,1,0,1,0,0,1,0,1,0,1,0,1,0,1,0,1 }, // 5
            { 0,0,0,0,0,0,1,1,1,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0 }, // 4
            { 1,0,1,0,1,1,0,1,1,0,1,1,0,1,0,1,0,1,0,1,1,0,0,1,0 }, // 3
            { 0,1,0,1,1,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,1,0,0,1 }, // 2 
            { 0,1,0,0,0,1,0,1,1,1,0,0,1,1,1,0,1,1,0,1,1,0,1,1,0 }, // 1
            { 0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0 }, // 0
        };

            mazeMap = maze;

            for (int i = 0; i < 25; i++)
            {
                for (int j = 0; j < 25; j++)
                {
                    if (maze[i, j] == 1)
                    {
                        GameObject stage_1_wall = Instantiate(wall);
                        stage_1_wall.transform.parent = mapCenter.transform;
                        stage_1_wall.transform.position = new Vector3(-26 + j * 4, 2.5f, 26 - i * 4);
                    }
                    else
                        continue;
                }
            }
        }
        #endregion
    }
}
